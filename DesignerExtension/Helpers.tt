<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>

<#+
   /// <summary>
   /// Gets the navigable owed ends which not correspond to any owned attributes for the given classifier.
   /// </summary>
   /// <param name="classifier">The classifier</param>
   /// <param name="ownedAttributes">The owned attributes</param>
   /// <returns>The owned attributes</returns>
   private static IEnumerable<IProperty> GetNavigableOwnedEnds(IClassifier classifier, IEnumerable<IProperty> ownedAttributes, out bool isComposition)
   {
      List<IProperty> ret = new List<IProperty>();

      isComposition = false;

      foreach(IAssociation association in classifier.GetRelatedLinks<IAssociation>()) 
      {
         IEnumerable<IProperty> navigableOwnedEnds = association.NavigableOwnedEnds;
         foreach (IProperty ownedEnd in navigableOwnedEnds)
         {
            if(StringComparer.OrdinalIgnoreCase.Equals(ownedEnd.Type.QualifiedName, classifier.QualifiedName))
            {
               // TODO
               // WTF?!?!?!? .Aggregation == none aber er geht trotzdem rein (und deshalb passt das ergebnis, gehört eigentlich anders gelöst)
               if (ownedEnd.Aggregation == AggregationKind.Composite)
               {
                  isComposition = true;
               }
            }

            if ((!StringComparer.OrdinalIgnoreCase.Equals(ownedEnd.Type.QualifiedName, classifier.QualifiedName)
               ||association.SourceElement == association.TargetElement)
               &&!IsMemberEndProcessedAsAttribute(ownedEnd, ownedAttributes))
            {
               ret.Add(ownedEnd);
            }
         }
      }

      return ret;
   }

   /// <summary>
   /// Check if an attribute exists with the same name and type as the member end.
   /// If so, and if the visibility on the attribute 
   /// </summary>
   /// <param name="memberEnd">The member end</param>
   /// <param name="attributes">The attributes</param>
   /// <returns>true if the attribute with the same name and type as memberEnd is already processed.</returns>
   private static bool IsMemberEndProcessedAsAttribute(IProperty memberEnd, IEnumerable<IProperty> attributes)
   {
      bool processed = false;
      var existingAttribs = attributes.Where(attrib => StringComparer.Ordinal.Equals(memberEnd.Name, attrib.Name) && (memberEnd.Type == attrib.Type));
      if (existingAttribs.Any())
      {
         processed = true;

         // check if the visibility conflicts, if so, send the user the warning message.
         IProperty existingAttrib = existingAttribs.FirstOrDefault();
         if (existingAttrib.Visibility != memberEnd.Visibility)
         {
            // Send user the warning message.
         }
      }

      return processed;
   }

   /// <summary>
   /// Write a property definition appropriate for class or struct.
   /// </summary>
   /// <param name="property">The umlproperty as a property.</param>
   private void WritePropertyDefinition(IProperty property, bool isComposition) 
   {
      Write(property.Visibility.ToString().ToLower()+" ");

      //override base property
      if(isComposition){
         Write("new ");
      }
      Write("virtual ");
      Write(AttributeStaticOption(property));

      WritePropertyTypeAndVariableName(property);
      WriteLine("{");
      PushIndent("\t");
      {
         WriteLine("get");
         WriteLine("{");
         PushIndent("\t");      
         {
            if(isComposition)
            {
               WriteLine("return base."  + property.Name + ";");
            }
            else
            {
               WriteLine("return "  + ToPrivateField(property.Name) + ";");
            }
         }
         PopIndent();
         WriteLine("}");

         WriteLine("");

         WriteLine("set");
         WriteLine("{");
         PushIndent("\t");
         {     
            if(isComposition)
            {
               WriteLine("base."  + property.Name + " = value;");
            }
            else
            {
               WriteLine(ToPrivateField(property.Name) + " = value;");
            }
         }
         PopIndent();
         WriteLine("}");
      }
      PopIndent();
      WriteLine("}");
   }

   private void WriteAssociationDefinition2(IProperty property, bool isComposition) 
   {
      Write(property.Visibility.ToString().ToLower()+" ");

      Write("new virtual ");
      Write(AttributeStaticOption(property));

      WritePropertyTypeAndVariableName(property);

      WriteLine("{");
      PushIndent("\t");
      {
         WriteLine("get");
         WriteLine("{");
         PushIndent("\t");      
         {
            if(isComposition)
            {
               WriteLine("return base."  + property.Name + ";");
            }
            else
            {
               WriteLine("return "  + ToPrivateField(property.Name) + ";");
            }
         }
         PopIndent();
         WriteLine("}");
     
         // compositions can't be reset
         if(!isComposition)
         {
            WriteLine("");

            WriteLine("set");
            WriteLine("{");
            PushIndent("\t");
            {
               WriteLine("base."  + property.Name + " = value;");
            }
            PopIndent();
            WriteLine("}");
         }
      }
      PopIndent();
      WriteLine("}");
   }

   private static string ToPrivateField(string name){
      return "_" + name.Substring(0, 1).ToLower() + name.Substring(1);
   }

   /// <summary>
   /// Operation static string
   /// </summary>
   /// <param name="operation">The operation</param>
   /// <returns>The static option string for operation</returns>
   private static string OperationStaticOption(IOperation operation) 
   {
      return operation.IsStatic ? "static " : string.Empty;
   }
    
   /// <summary>
   /// Field readonly string
   /// </summary>
   /// <param name="field">The field</param>
   /// <returns>The readonly option string for field</returns>
   private static string FieldReadOnlyOption(IProperty field)
   {
      return field.IsReadOnly ? "readonly " : string.Empty;
   }

   /// <summary>
   /// Attribute static string
   /// </summary>
   /// <param name="attribute">The attribute</param>
   /// <returns>The static option string for attribute</returns>
   private static string AttributeStaticOption(IProperty attribute)
   {
      return attribute.IsStatic ? "static " : string.Empty;
   }

   /// <summary>
   /// Operation sealed string
   /// </summary>
   /// <param name="operation">The operation</param>
   /// <returns>The static option string for operation</returns>
   private static string OperationSealedOption(IOperation operation) 
   {
      return operation.IsLeaf ? "sealed " : string.Empty;
   }

   /// <summary>
   /// Operation abstract string
   /// </summary>
   /// <param name="operation">The operation</param>
   /// <returns>The abstract option string for operation</returns>
   private static string OperationAbstractOption(IOperation operation) 
   {
      return operation.IsAbstract ? "abstract " : string.Empty;
   }

   /// <summary>
   /// Property sealed string
   /// </summary>
   /// <param name="property">The property</param>
   /// <returns>The sealed option string for property</returns>
   private static string PropertySealedOption(IProperty property) 
   {
      return property.IsLeaf ? "sealed " : string.Empty;
   }

   /// <summary>
   /// Write the property type and variable name.
   /// </summary>
   /// <param name="property">The property</param>
   /// <param name="isEndOfLine">true to end the line</param>
   private void WritePropertyTypeAndVariableName(IProperty property)
   {      
      string typeName = ElementType(property.Type);
      string propertyName = property.Name;

      Write(typeName + " " + propertyName);
      WriteLine("");
   }

   /// <summary>
   /// Gets the type if set, otherwise "object".  
   /// </summary>
   /// <param name="type">the type in question</param>
   /// <param name="isEnumerable">specifies if the type should be an IEnumerable</param>
   /// <returns>the type as element type</returns>
   private static string ElementType(IType type)
   {
      string text = string.Empty;
      if (type == null)
      {
         text = "object";
      }
      else 
      {
         text = type.Name;
      }

      return text;
   }

   /// <summary>
   /// Translate a string to a C# equivalent.  For example, 
   /// CSharpTranslation("Boolean") returns "bool".  
   /// CSharpTranslation("Unrecognized text") returns "Unrecognized text".
   /// </summary>
   /// <param name="original">text to translate</param>
   /// <returns>Translated text if there is a known translation, otherwise the original text.</returns>
   private static string CSharpTranslation(string original)
   {
      switch (original)
      {
         case "Boolean": return "bool";
         case "String": return "string";
         case "Integer": return "int";
         case "UnlimitedNatural": return "uint";
      }

      return original;
   }

   /// <summary>
   /// Determine if the property's multiplicty setting requires an IEnumerable type"/>
   /// </summary>
   /// <param name="property">query this element's multiplicity</param>
   /// <returns>true if the element's multiplicity specifies an upper bound greater than 1</returns>
   private static bool IsEnumerable(IProperty property)
   {
      return IsEnumerable(property.UpperValue);
   }

   /// <summary>
   /// Determine if the parameter's multiplicty setting requires an IEnumerable type"/>
   /// </summary>
   /// <param name="parameter">query this element's multiplicity</param>
   /// <returns>true if the element's multiplicity specifies an upper bound greater than 1</returns>
   private static bool IsEnumerable(IParameter parameter)
   {
      return IsEnumerable(parameter.UpperValue);
   }

   /// <summary>
   /// Determine if the provided value represents an upper bound that requires an IEnumerable type"/>
   /// </summary>
   /// <param name="upperValue">value representing a multiplicity's upper bound</param>
   /// <returns>true if the upperValue represents a value greater than 1</returns>
   private static bool IsEnumerable(IValueSpecification upperValue)
   {
      if (upperValue != null)
      {
         string upperBound = upperValue.ToString();
         if(!string.IsNullOrWhiteSpace(upperBound))
         {
            if (upperBound.Contains("*"))
            {
               return true;
            }
            int val;
            if (int.TryParse(upperBound, out val))
            {
               return val > 1;
            }
         }
      }

      return false;
   }
#>