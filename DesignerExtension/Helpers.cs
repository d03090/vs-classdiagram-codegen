// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DesignerExtension
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Microsoft.VisualStudio.Uml.AuxiliaryConstructs;
    using Microsoft.VisualStudio.Uml.Classes;
    using Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Schule\_UNI\Bachelorarbeit\vs-classdiagram-codegen\DesignerExtension\Helpers.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class Helpers : HelpersBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 9 "D:\Schule\_UNI\Bachelorarbeit\vs-classdiagram-codegen\DesignerExtension\Helpers.tt"

   /// <summary>
   /// Gets the navigable owed ends which not correspond to any owned attributes for the given classifier.
   /// </summary>
   /// <param name="classifier">The classifier</param>
   /// <param name="ownedAttributes">The owned attributes</param>
   /// <returns>The owned attributes</returns>
   private static IEnumerable<IProperty> GetNavigableOwnedEnds(IClassifier classifier, IEnumerable<IProperty> ownedAttributes, out bool isComposition)
   {
      List<IProperty> ret = new List<IProperty>();

      isComposition = false;

      foreach(IAssociation association in classifier.GetRelatedLinks<IAssociation>()) 
      {
         IEnumerable<IProperty> navigableOwnedEnds = association.NavigableOwnedEnds;
         foreach (IProperty ownedEnd in navigableOwnedEnds)
         {
            if(StringComparer.OrdinalIgnoreCase.Equals(ownedEnd.Type.QualifiedName, classifier.QualifiedName))
            {
               // TODO
               // WTF?!?!?!? .Aggregation == none aber er geht trotzdem rein (und deshalb passt das ergebnis, gehört eigentlich anders gelöst)
               if (ownedEnd.Aggregation == AggregationKind.Composite)
               {
                  isComposition = true;
               }
            }

            if ((!StringComparer.OrdinalIgnoreCase.Equals(ownedEnd.Type.QualifiedName, classifier.QualifiedName)
               ||association.SourceElement == association.TargetElement)
               &&!IsMemberEndProcessedAsAttribute(ownedEnd, ownedAttributes))
            {
               ret.Add(ownedEnd);
            }
         }
      }

      return ret;
   }

   /// <summary>
   /// Check if an attribute exists with the same name and type as the member end.
   /// If so, and if the visibility on the attribute 
   /// </summary>
   /// <param name="memberEnd">The member end</param>
   /// <param name="attributes">The attributes</param>
   /// <returns>true if the attribute with the same name and type as memberEnd is already processed.</returns>
   private static bool IsMemberEndProcessedAsAttribute(IProperty memberEnd, IEnumerable<IProperty> attributes)
   {
      bool processed = false;
      var existingAttribs = attributes.Where(attrib => StringComparer.Ordinal.Equals(memberEnd.Name, attrib.Name) && (memberEnd.Type == attrib.Type));
      if (existingAttribs.Any())
      {
         processed = true;

         // check if the visibility conflicts, if so, send the user the warning message.
         IProperty existingAttrib = existingAttribs.FirstOrDefault();
         if (existingAttrib.Visibility != memberEnd.Visibility)
         {
            // Send user the warning message.
         }
      }

      return processed;
   }

   /// <summary>
   /// Write a property definition appropriate for class or struct.
   /// </summary>
   /// <param name="property">The umlproperty as a property.</param>
   private void WritePropertyDefinition(IProperty property, bool isComposition) 
   {
      Write(property.Visibility.ToString().ToLower()+" ");

      //override base property
      if(isComposition){
         Write("new ");
      }
      Write("virtual ");
      Write(AttributeStaticOption(property));

      WritePropertyTypeAndVariableName(property);
      WriteLine("{");
      PushIndent("\t");
      {
         WriteLine("get");
         WriteLine("{");
         PushIndent("\t");      
         {
            if(isComposition)
            {
               WriteLine("return base."  + property.Name + ";");
            }
            else
            {
               WriteLine("return "  + ToPrivateField(property.Name) + ";");
            }
         }
         PopIndent();
         WriteLine("}");

         WriteLine("");

         WriteLine("set");
         WriteLine("{");
         PushIndent("\t");
         {     
            if(isComposition)
            {
               WriteLine("base."  + property.Name + " = value;");
            }
            else
            {
               WriteLine(ToPrivateField(property.Name) + " = value;");
            }
         }
         PopIndent();
         WriteLine("}");
      }
      PopIndent();
      WriteLine("}");
   }

   private void WriteAssociationDefinition2(IProperty property, bool isComposition) 
   {
      Write(property.Visibility.ToString().ToLower()+" ");

      Write("new virtual ");
      Write(AttributeStaticOption(property));

      WritePropertyTypeAndVariableName(property);

      WriteLine("{");
      PushIndent("\t");
      {
         WriteLine("get");
         WriteLine("{");
         PushIndent("\t");      
         {
            if(isComposition)
            {
               WriteLine("return base."  + property.Name + ";");
            }
            else
            {
               WriteLine("return "  + ToPrivateField(property.Name) + ";");
            }
         }
         PopIndent();
         WriteLine("}");
     
         // compositions can't be reset
         if(!isComposition)
         {
            WriteLine("");

            WriteLine("set");
            WriteLine("{");
            PushIndent("\t");
            {
               WriteLine("base."  + property.Name + " = value;");
            }
            PopIndent();
            WriteLine("}");
         }
      }
      PopIndent();
      WriteLine("}");
   }

   private static string ToPrivateField(string name){
      return "_" + name.Substring(0, 1).ToLower() + name.Substring(1);
   }

   /// <summary>
   /// Operation static string
   /// </summary>
   /// <param name="operation">The operation</param>
   /// <returns>The static option string for operation</returns>
   private static string OperationStaticOption(IOperation operation) 
   {
      return operation.IsStatic ? "static " : string.Empty;
   }
    
   /// <summary>
   /// Field readonly string
   /// </summary>
   /// <param name="field">The field</param>
   /// <returns>The readonly option string for field</returns>
   private static string FieldReadOnlyOption(IProperty field)
   {
      return field.IsReadOnly ? "readonly " : string.Empty;
   }

   /// <summary>
   /// Attribute static string
   /// </summary>
   /// <param name="attribute">The attribute</param>
   /// <returns>The static option string for attribute</returns>
   private static string AttributeStaticOption(IProperty attribute)
   {
      return attribute.IsStatic ? "static " : string.Empty;
   }

   /// <summary>
   /// Operation sealed string
   /// </summary>
   /// <param name="operation">The operation</param>
   /// <returns>The static option string for operation</returns>
   private static string OperationSealedOption(IOperation operation) 
   {
      return operation.IsLeaf ? "sealed " : string.Empty;
   }

   /// <summary>
   /// Operation abstract string
   /// </summary>
   /// <param name="operation">The operation</param>
   /// <returns>The abstract option string for operation</returns>
   private static string OperationAbstractOption(IOperation operation) 
   {
      return operation.IsAbstract ? "abstract " : string.Empty;
   }

   /// <summary>
   /// Property sealed string
   /// </summary>
   /// <param name="property">The property</param>
   /// <returns>The sealed option string for property</returns>
   private static string PropertySealedOption(IProperty property) 
   {
      return property.IsLeaf ? "sealed " : string.Empty;
   }

   /// <summary>
   /// Write the property type and variable name.
   /// </summary>
   /// <param name="property">The property</param>
   /// <param name="isEndOfLine">true to end the line</param>
   private void WritePropertyTypeAndVariableName(IProperty property)
   {      
      string typeName = ElementType(property.Type);
      string propertyName = property.Name;

      Write(typeName + " " + propertyName);
      WriteLine("");
   }

   /// <summary>
   /// Gets the type if set, otherwise "object".  
   /// </summary>
   /// <param name="type">the type in question</param>
   /// <param name="isEnumerable">specifies if the type should be an IEnumerable</param>
   /// <returns>the type as element type</returns>
   private static string ElementType(IType type)
   {
      string text = string.Empty;
      if (type == null)
      {
         text = "object";
      }
      else 
      {
         text = type.Name;
      }

      return text;
   }

   /// <summary>
   /// Translate a string to a C# equivalent.  For example, 
   /// CSharpTranslation("Boolean") returns "bool".  
   /// CSharpTranslation("Unrecognized text") returns "Unrecognized text".
   /// </summary>
   /// <param name="original">text to translate</param>
   /// <returns>Translated text if there is a known translation, otherwise the original text.</returns>
   private static string CSharpTranslation(string original)
   {
      switch (original)
      {
         case "Boolean": return "bool";
         case "String": return "string";
         case "Integer": return "int";
         case "UnlimitedNatural": return "uint";
      }

      return original;
   }

   /// <summary>
   /// Determine if the property's multiplicty setting requires an IEnumerable type"/>
   /// </summary>
   /// <param name="property">query this element's multiplicity</param>
   /// <returns>true if the element's multiplicity specifies an upper bound greater than 1</returns>
   private static bool IsEnumerable(IProperty property)
   {
      return IsEnumerable(property.UpperValue);
   }

   /// <summary>
   /// Determine if the parameter's multiplicty setting requires an IEnumerable type"/>
   /// </summary>
   /// <param name="parameter">query this element's multiplicity</param>
   /// <returns>true if the element's multiplicity specifies an upper bound greater than 1</returns>
   private static bool IsEnumerable(IParameter parameter)
   {
      return IsEnumerable(parameter.UpperValue);
   }

   /// <summary>
   /// Determine if the provided value represents an upper bound that requires an IEnumerable type"/>
   /// </summary>
   /// <param name="upperValue">value representing a multiplicity's upper bound</param>
   /// <returns>true if the upperValue represents a value greater than 1</returns>
   private static bool IsEnumerable(IValueSpecification upperValue)
   {
      if (upperValue != null)
      {
         string upperBound = upperValue.ToString();
         if(!string.IsNullOrWhiteSpace(upperBound))
         {
            if (upperBound.Contains("*"))
            {
               return true;
            }
            int val;
            if (int.TryParse(upperBound, out val))
            {
               return val > 1;
            }
         }
      }

      return false;
   }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class HelpersBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
